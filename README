# Web Server

This is a web-server capable of accepting GET and HEAD requests made in C for the networking course. It supports both IPv4 and IPv6. It is base on Dr. Ian Batten's basic server code, which I adapted to receive and respond to HTTP requests.

### More information

It displays files from the `html` folder. It can retrieve files from that folder or from other relative path. Requesting `[some_other_path]/` will result in the server trying to get the file `[some_other_path]/index.html`.

### Code

The code contains:
 - a function which reads from a socket, displays the data and then echoes it back where it came from (service_client_socket.c)
 - a function which acquires a socket to listen on (get_listen_socket.c)
 - a function which waits for incoming connections on that socket and processes them either one at a time (service_listen_socket.c) or for multiple connections in parallel (service_listen_socket_multithread.c)
 - some helper functions, header files, a main function and other odds and ends

### Running instructions

To compile the code, run: ``$ make``

For the benefit of better diagnostics, make attempts to use clang if it appears to be available.

Once compiled, it can be run either as single-threaded or multi-threaded server using the following commands, specifying a port-number to listen on.

```bash
$ ./single_thread_server 1234
binding to port 1234
```

```bash
$ ./multi_thread_server 4444
binding to port 4444
```

You can now connect to the server either through the terminal or using an internet browser. For example:
```bash
$ wget localhost:4444
```

* If you are using Solaris, you need to use gmake, as it uses some of the GNU extensions, notably $+.

### Things left to do:

- Illegal or incomprehensible URLs should be flagged and rejected with an appropriate error,
- The program should handle arbitrary-length inputs correctly. (use https://stackoverflow.com/questions/238603/how-can-i-get-a-files-size-in-cfor long files)